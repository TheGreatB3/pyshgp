*****************
Push Instructions
*****************

A Push instruction is object that can manipulate the typed Stacks of a ``PushState``. Typically, an instruction is defined by some function. When evaluated, the arguments to the instruction’s function are taken from the stacks of the ``PushInterpreter``’s PushState and the returned values are pushed to back to the stacks.

In PyshGP, there are a variety of classes that concretely implement the concept of an Instruction. These definitions capture all the required information about an instruction. For example, the ``SimpleInstruction`` class automatically handles the popping of arguments and pushing of returned values for functions that only require access to the top items of some stacks. Meanwhile, the more flexible ``StateToStateInstruction`` only requires a function which takes the entire PushState and returns a PushState.

Every instruction must contain information on which ``PushTypes`` it manipulates. This is so that the ``PushInterpreter`` will know which stacks to create given a collection of Instruction that will be used. It also aids in filtering collections of instructions based on what types they manipulate.

Instructions also denote how many code blocks are expected to follow the instructions. This is used during ``Genome`` to ``CodeBlock`` translation to provide the nested structure of code blocks. For example, the ``exec_if`` instruction should be followed by two code blocks: one for the "then" clause, one for the "else" clause.

Example Instruction Definitions
===============================

Simple Instruction
------------------

.. code-block:: python
   :linenos:

   def protected_divison(a, b):
       if a == 0:
           return Token.revert
       return b / a,

   int_div_instruction = SimpleInstruction(
       "int_div".format(t=push_type),
       protected_divison,
       input_types=["int", "int"],
       output_types=["int"],
       code_blocks=0,
       docstring="Divides the top two ints and pushes the result."
   )


Produces Many Of Type Instruction
---------------------------------

Takes State Instruction
-----------------------

State-to-State Instruction
--------------------------


Preparing Instruction Sets
==========================

To specify which instructions should be used during program synthesis (Specifically during gene spawning, and genome variation), PyshGP utilizes an InstructionSet object. Instructions can be added, or “registered,” into an InsturctionSet as long as the instructions name is unique across the set.

PyshGp contains a collection of “core” instructions that work with the typical data types. Subsets of the “core” instruction can easily be registered using the methods of the InstructionSet object.



If custom instructions are instantiated (either via a provided class or by extending the Instruction abstract base class) they can also be registered in an InstructionSet.

Defining Instructions which manipulate custom PushTypes or custom PushStacks is not currently supported, however it will be future versions.

Registering Custom Instructions
-------------------------------
